[["index.html", "3D’omics | Colon microdissection test Developmental work Chapter 1 Introduction 1.1 Prepare the R environment", " 3D’omics | Colon microdissection test Developmental work Antton Alberdi1 2024-06-12 Chapter 1 Introduction This webbook contains all the code used for the study on the effect of probiotics on Salmonella infection in broiler chicken. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/3d-omics/ANMI007_colon_test.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(jpeg) library(patchwork) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(Hmsc) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Count data 2.2 Filter and normalise data 2.3 Color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.0.1 Sample metadata sample_metadata &lt;- airtable(&quot;4-MSE-Info&quot;, &quot;appKakM1bnKSekwuW&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;LabBatch_text&quot;,&quot;IntestinalSection&quot;,&quot;SampleType&quot;,&quot;Xcoord&quot;,&quot;Ycoord&quot;,&quot;size&quot;,&quot;cryosection_text&quot;,&quot;buffer_text&quot;,&quot;Collection_Success&quot;,&quot;UsedCycles&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(LabBatch_text %in% c(&quot;MSEB0011&quot;)) %&gt;% rename(batch=LabBatch_text,microsample=ID,section=IntestinalSection,type=SampleType,cryosection=cryosection_text,buffer=buffer_text,collection=Collection_Success,cycles=UsedCycles) %&gt;% select(microsample,section,type,batch,cryosection,buffer,Xcoord,Ycoord,size,collection,cycles) %&gt;% unnest(c(section, Xcoord, Ycoord, size, collection, cycles)) %&gt;% arrange(microsample) 2.1 Count data read_counts &lt;- read_tsv(&quot;data/MSEB0011_read_counts.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% pivot_longer(!genome, names_to = &quot;data&quot;, values_to=&quot;counts&quot;) %&gt;% mutate(sample = substr(data, 1, 7)) %&gt;% group_by(genome,sample) %&gt;% summarise(counts=sum(counts), .groups=&quot;drop&quot;) %&gt;% pivot_wider(names_from=&quot;sample&quot;, values_from=&quot;counts&quot;) 2.1.1 Base hit table This is the document containing the number of nucleotide bases have been covered by at least one read in each sample and MAG. This information is used to calculate MAG coverage values. basehits &lt;- read_tsv(&quot;data/MSEB0011_covered_bases.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% pivot_longer(!genome, names_to = &quot;data&quot;, values_to=&quot;counts&quot;) %&gt;% mutate(sample = substr(data, 1, 7)) %&gt;% group_by(genome,sample) %&gt;% summarise(counts=sum(counts), .groups=&quot;drop&quot;) %&gt;% pivot_wider(names_from=&quot;sample&quot;, values_from=&quot;counts&quot;) 2.1.2 Genome metadata Relevant metadata of genomes is fetched from 2-3 files and merged into one genome metadata object for downstream analyses. 2.1.2.1 Taxonomy This is the raw taxonomy table generated by GTDBtk, which is simplified for downstream analyses. genome_taxonomy &lt;- read_tsv(&quot;data/genome_taxonomy.tsv&quot;) %&gt;% rename(genome = user_genome) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% select(genome,domain,phylum,class,order,family,genus,species) %&gt;% arrange(match(genome, read_counts$genome)) 2.1.2.2 Genome quality Quality properties of the genomes. genome_quality &lt;- read_tsv(&quot;data/genome_quality.tsv&quot;) %&gt;% rename(genome = 1) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% arrange(match(genome, read_counts$genome)) %&gt;% select(genome, Completeness, Contamination, Coding_Density, Genome_Size) %&gt;% rename(completeness=Completeness,contamination=Contamination,coding_density=Coding_Density,length=Genome_Size) 2.1.2.3 Merged metadata object Merge taxonomy, length and quality information genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=join_by(genome==genome)) #join quality 2.1.3 Genome tree This is the raw tree generated by GTDBtk, which needs to be pruned to obtain the phylogenetic tree of the genomes. Note that the archaeal tree is only generated if any archaeans are detected among the genomes. genome_tree &lt;- read.tree(&quot;data/genome_tree.tre&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=read_counts$genome) # keep only MAG tips 2.1.4 MAG functional annotations This is the raw annotation table generated by DRAM, which is used to generate GIFT data using distillR. genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1,genome=2) 2.2 Filter and normalise data Raw data needs to be filtered and normalised to make it useful for downstream analyses. 2.2.1 Generate coverage table By dividing the number of base hits by the length of each genome, coverage values can be calculated. genome_coverage &lt;- basehits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.2.2 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.3 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.4 Distil functional annotations Raw functional annotations are distilled into genome-inferred functional traits to generate biologically more meaningful functional traits for downstream analyses. genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.3 Color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_counts_filt, genome_tree, genome_metadata, genome_gifts, sample_metadata, phylum_colors, file = &quot;data/data.Rdata&quot;) read_counts: Number of reads mapped to each genome in each sample. Note this is the unfiltered and unnormalised raw community composition table. genome_counts: Number of genomes quantified in each sample, calculated through filtering and normalising read_counts. This is the community composition table to be used in downstream analyses unless otherwise stated. genome_tree: Phylogenetic tree of the genomes, to be employed in downstream phylogenetic analyses. genome_metadata: Taxonomic and quality information of the genomes. sample_metadata: Treatment/population and other relevant metadata of the samples. "],["data-quality.html", "Chapter 3 Data quality 3.1 Load statistics 3.2 Individual overview 3.3 Biplots 3.4 Quality flagging", " Chapter 3 Data quality load(&quot;data/data.Rdata&quot;) 3.1 Load statistics read_stats &lt;- read_tsv(&quot;data/reports/multiqc_fastqc.txt&quot;, col_types = cols_only(&quot;Sample&quot; = col_character(), &quot;Total Sequences&quot; = col_double(), &quot;%GC&quot; = col_double(), &quot;total_deduplicated_percentage&quot; = col_double())) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample,total_sequences=&quot;Total Sequences&quot;,percent_gc=&quot;%GC&quot;,percent_unique=total_deduplicated_percentage) %&gt;% group_by(microsample) %&gt;% summarise(total_sequences=sum(total_sequences), percent_unique=mean(percent_unique), percent_gc=mean(percent_gc)) host_mapping_stats &lt;- read_tsv(&quot;data/reports/multiqc_samtools_flagstat.txt&quot;) %&gt;% mutate(reference = case_when( grepl(&quot;GRCh38&quot;, Sample, ignore.case = TRUE) ~ &quot;human&quot;, grepl(&quot;GRCg7b&quot;, Sample, ignore.case = TRUE) ~ &quot;chicken&quot;, TRUE ~ NA )) %&gt;% filter(reference==&quot;chicken&quot;) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample,reads_mapped_host=mapped_passed,reads_mapped_host_percent=mapped_passed_pct) %&gt;% select(microsample,reads_mapped_host,reads_mapped_host_percent) %&gt;% group_by(microsample) %&gt;% summarise(reads_mapped_host=sum(reads_mapped_host),reads_mapped_host_percent=mean(reads_mapped_host_percent)) human_mapping_stats &lt;- read_tsv(&quot;data/reports/multiqc_samtools_flagstat.txt&quot;) %&gt;% mutate(reference = case_when( grepl(&quot;GRCh38&quot;, Sample, ignore.case = TRUE) ~ &quot;human&quot;, grepl(&quot;GRCg7b&quot;, Sample, ignore.case = TRUE) ~ &quot;chicken&quot;, TRUE ~ NA )) %&gt;% filter(reference==&quot;human&quot;) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample, reads_mapped_human=mapped_passed,reads_mapped_human_percent=mapped_passed_pct) %&gt;% select(microsample,reads_mapped_human,reads_mapped_human_percent) %&gt;% group_by(microsample) %&gt;% summarise(reads_mapped_human=sum(reads_mapped_human),reads_mapped_human_percent=mean(reads_mapped_human_percent)) quantification_stats &lt;- read_tsv(&quot;data/reports/multiqc_samtools_stats.txt&quot;) %&gt;% filter(str_detect(Sample, &quot;mgg-pbdrep&quot;)) %&gt;% mutate(Sample = str_extract(Sample, &quot;M\\\\d+&quot;)) %&gt;% rename(microsample=Sample) %&gt;% group_by(microsample) %&gt;% summarise(reads_mapped=sum(reads_mapped),reads_mapped_percent=mean(reads_mapped_percent)) quality_stats &lt;- read_stats %&gt;% left_join(host_mapping_stats, by=join_by(microsample==microsample)) %&gt;% left_join(human_mapping_stats, by=join_by(microsample==microsample)) %&gt;% left_join(quantification_stats, by=join_by(microsample==microsample)) 3.2 Individual overview 3.2.1 Sequencing depth quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=total_sequences,y=microsample,fill=section))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=10000000, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Number of reads&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.2 Sequence duplication quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=percent_unique,y=microsample,fill=collection))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=35, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Percentage of non-duplicates&quot;, y=&quot;Microsamples&quot;, fill=&quot;Collection success&quot;) 3.2.3 GC % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=percent_gc,y=microsample,fill=collection))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=60, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Percentage of GC&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.4 Host % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=reads_mapped_host_percent,y=microsample,fill=section))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Host %&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.5 Human % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=reads_mapped_human_percent,y=microsample,fill=section))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=5, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Human %&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.6 Bacteria mapping % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=reads_mapped_percent,y=microsample,fill=section))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=75, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Mapped to MAGs (%)&quot;, y=&quot;Microsamples&quot;, fill=&quot;Library protocol&quot;) 3.2.7 Domain-adjusted mapping rate 3.3 Biplots 3.3.1 Sequencing depth vs. GC % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% ggplot(aes(x=percent_gc,y=total_sequences,color=section))+ geom_point()+ scale_color_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + facet_nested(. ~ batch, scales=&quot;free&quot;) + labs(color=&quot;Sexrion&quot;) 3.3.2 Unique sequences vs. GC % quality_stats %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% ggplot(aes(x=percent_gc,y=percent_unique,color=section))+ geom_point()+ scale_color_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + facet_nested(. ~ batch, scales=&quot;free&quot;)+ labs(color=&quot;Library protocol&quot;) 3.4 Quality flagging quality &lt;- quality_stats %&gt;% mutate(depth = case_when( total_sequences &lt;= 10000000 ~ 0, total_sequences &gt; 10000000 ~ 1, TRUE ~ NA)) %&gt;% mutate(duplicates = case_when( percent_unique &lt;= 35 ~ 0, percent_unique &gt; 35 ~ 1, TRUE ~ NA)) %&gt;% mutate(gc = case_when( percent_gc &gt;= 60 ~ 0, percent_gc &lt; 60 ~ 1, TRUE ~ NA)) %&gt;% mutate(human = case_when( reads_mapped_human_percent &gt;= 5 ~ 0, reads_mapped_human_percent &lt; 5 ~ 1, TRUE ~ NA)) %&gt;% mutate(bacteria = case_when( reads_mapped_percent &lt;= 75 ~ 0, reads_mapped_percent &gt; 75 ~ 1, TRUE ~ NA)) %&gt;% select(microsample, depth, duplicates, gc, human, bacteria) %&gt;% mutate(quality = depth + duplicates + gc + human + bacteria) %&gt;% select(microsample, quality) quality %&gt;% write_tsv(&quot;results/quality.tsv&quot;) 3.4.1 Quality overview quality %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% ggplot(aes(x=quality,y=microsample,fill=collection))+ geom_col()+ scale_fill_manual(values=c(&quot;#a3d1cf&quot;,&quot;#d1a3cf&quot;)) + geom_vline(xintercept=5, linetype=&quot;dashed&quot;, color = &quot;red&quot;, size=1) + facet_nested(batch + section + type ~ ., scales=&quot;free&quot;, space=&quot;free&quot;, switch = &quot;y&quot;) + theme(strip.text.y.left = element_text(angle = 0)) + labs(x=&quot;Quality score&quot;, y=&quot;Microsamples&quot;, fill=&quot;Collection success&quot;) quality %&gt;% left_join(sample_metadata,by=join_by(microsample==microsample)) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% group_by(section) %&gt;% summarise(average=mean(quality, na.rm=TRUE), percentage_5 = mean(quality == 5, na.rm = TRUE) * 100) %&gt;% tt() tinytable_kbg2s4kcorahy6235lu6 .table td.tinytable_css_nbcz3igd3j02qbxknlg6, .table th.tinytable_css_nbcz3igd3j02qbxknlg6 { border-bottom: solid 0.1em #d3d8dc; } section average percentage_5 Caecum right 4.430556 62.5 "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy barplot 4.2 Genus overview", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) quality &lt;- read_tsv(&quot;results/quality.tsv&quot;) Rows: 190 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): microsample dbl (1): quality ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 4.1 Taxonomy barplot 4.1.1 Positive samples, coverage-filtered #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata mutate(section=unlist(section)) %&gt;% filter(!is.na(count)) %&gt;% filter(count &gt; 0) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(quality == 5) %&gt;% ggplot(., aes(x=count,y=microsample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors[-4]) + labs(x = &quot;Relative abundance&quot;, y=&quot;Microsamples&quot;) + facet_nested(cryosection ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(strip.text.y = element_text(angle = 0), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;)) + labs(fill=&quot;Phylum&quot;) genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata mutate(section=unlist(section)) %&gt;% filter(!is.na(count)) %&gt;% filter(count &gt; 0) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(quality == 5) %&gt;% mutate(genome=factor(genome,levels=genome_tree$tip.label)) %&gt;% ggplot(aes(x=count, y=microsample, fill=genus, group=genus)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders labs(x = &quot;Relative abundance&quot;, y=&quot;Microsamples&quot;) + facet_nested(cryosection ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend()) + theme(strip.text.y = element_text(angle = 0), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;), legend.position=&quot;bottom&quot;) + labs(fill=&quot;Genus&quot;) 4.1.2 Positive samples, coverage-unfiltered #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata mutate(section=unlist(section)) %&gt;% filter(!is.na(count)) %&gt;% filter(count &gt; 0) %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(quality == 5) %&gt;% ggplot(., aes(x=count,y=microsample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y=&quot;Microsamples&quot;) + facet_nested(cryosection ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(strip.text.y = element_text(angle = 0), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;)) + labs(fill=&quot;Phylum&quot;) 4.1.3 Control samples, coverage-unfiltered #Get phylum colors from the EHI standard phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% #filter(phylum %in% c(&quot;p__Actinomycetota&quot;,&quot;p__Bacillota&quot;,&quot;p__Bacillota_A&quot;,&quot;p__Pseudomonadota&quot;,&quot;p__Verrucomicrobiota&quot;)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata filter(is.na(Xcoord)) %&gt;% filter(type %in% c(&quot;NegativeMembrane&quot;,&quot;NegativeCollection&quot;,&quot;NegativeReaction&quot;)) %&gt;% ggplot(., aes(x=count,y=microsample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y=&quot;Membrane controls&quot;) + facet_nested(cryosection + type ~ ., scales=&quot;free_y&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(strip.text.y = element_text(angle = 0), axis.text.y = element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), panel.spacing = unit(0, &quot;lines&quot;)) + labs(fill=&quot;Phylum&quot;) vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) + geom_tiplab() *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Found more than one class &quot;phylo&quot; in cache; using the first, from namespace &#39;phyloseq&#39; Also defined by &#39;tidytree&#39; phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) Rows: 202 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() Rows: 202 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (2): phylum, colors ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. vertical_tree &lt;- gheatmap(vertical_tree, phylum_colors, offset=-0.3, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. sample_selection &lt;- sample_metadata %&gt;% filter(!is.na(Xcoord)) %&gt;% left_join(quality, by=join_by(microsample==microsample)) %&gt;% filter(quality&gt;=5) %&gt;% select(microsample) %&gt;% pull() genome_counts_selected &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,sample_selection))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() vertical_tree &lt;- gheatmap(vertical_tree, genome_counts_selected, offset=-0.2, width=0.5, colnames=FALSE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. vertical_tree 4.2 Genus overview genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;microsample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(quality, by = join_by(microsample == microsample)) %&gt;% #append sample metadata filter(quality&gt;=5) %&gt;% group_by(microsample,cryosection,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_9a471qo70xjtzxsno24o .table td.tinytable_css_uaurgxybhqcoqcicdhf8, .table th.tinytable_css_uaurgxybhqcoqcicdhf8 { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Blautia 1.415165e-01 0.1073365208 Eisenbergiella 1.211367e-01 0.0072496627 Mediterraneibacter 9.882063e-02 0.0080567835 Choladocola 5.382332e-02 0.0181704527 Streptococcus 5.364124e-02 0.0446141635 Agathobaculum 4.394104e-02 0.0120987075 Caccovicinus 4.336548e-02 0.0151276583 Pelethomonas 3.697454e-02 0.0344834189 Lactobacillus 3.319425e-02 0.0257383125 Fimenecus 3.243428e-02 0.0302682673 Gallimonas 3.044755e-02 0.0285881065 Acutalibacter 2.897240e-02 0.0035123478 UBA1417 2.524574e-02 0.0083481457 Negativibacillus 2.239375e-02 0.0076181853 Lawsonibacter 2.185606e-02 0.0060775371 Anaerobutyricum 1.960099e-02 0.0021010163 Enterocloster 1.480431e-02 0.0074888423 Dysosmobacter 1.304275e-02 0.0093588049 Merdivicinus 1.203935e-02 0.0071049659 Lachnoclostridium_A 1.185888e-02 0.0031752503 Intestinimonas 1.159075e-02 0.0071633881 Rubneribacter 9.925375e-03 0.0013520870 Flavonifractor 9.403895e-03 0.0016224845 Clostridium_Q 8.511605e-03 0.0091097365 Thomasclavelia 8.455363e-03 0.0067802297 Anaeromassilibacillus 8.097524e-03 0.0078246041 Escherichia 7.594034e-03 0.0033677408 Copromonas 7.283530e-03 0.0025945191 Faecousia 7.123719e-03 0.0068608648 Ornithomonoglobus 6.336604e-03 0.0057056932 UMGS1370 5.551334e-03 0.0041535617 Anaerotignum 5.047360e-03 0.0045683428 Enterenecus 3.936354e-03 0.0141899497 Merdisoma 3.916381e-03 0.0036395670 HGM12545 3.633129e-03 0.0034388628 Borkfalkia 3.495036e-03 0.0017718409 Pullichristensenella 3.469869e-03 0.0032979124 Scatosoma 3.325432e-03 0.0031174044 Scatomorpha 3.161439e-03 0.0029680201 Sellimonas 3.093446e-03 0.0029526525 Klebsiella 2.695176e-03 0.0030438039 Lachnoclostridium_B 2.584244e-03 0.0024238099 Faecivivens 2.294980e-03 0.0022184880 Akkermansia 1.712760e-03 0.0016207176 Anaerostipes 1.348611e-03 0.0015525474 Anaerotruncus 1.222109e-03 0.0013483618 Evtepia 1.044212e-03 0.0011793775 Ruthenibacterium 9.754233e-04 0.0011289357 Gallacutalibacter 9.580371e-04 0.0012464595 Roslinia 8.184423e-04 0.0010738386 Scatavimonas 6.521948e-04 0.0008791553 HGM12998 2.844308e-04 0.0005424567 Merdimonas 2.816320e-04 0.0008337256 Massilimicrobiota 2.765415e-04 0.0005917204 Romboutsia 2.042220e-04 0.0004908791 UBA4716 1.315085e-04 0.0003607827 Clostridium_AQ 1.240170e-04 0.0003620509 Harrysmithimonas 9.739388e-05 0.0005322090 Gordonibacter 6.437947e-05 0.0002756017 Acetatifactor 0.000000e+00 0.0000000000 Alangreenwoodia 0.000000e+00 0.0000000000 Alistipes 0.000000e+00 0.0000000000 An181 0.000000e+00 0.0000000000 Angelakisella 0.000000e+00 0.0000000000 Avimicrobium 0.000000e+00 0.0000000000 Avoscillospira 0.000000e+00 0.0000000000 Bifidobacterium 0.000000e+00 0.0000000000 Blautia_A 0.000000e+00 0.0000000000 Butyricicoccus 0.000000e+00 0.0000000000 CAG-245 0.000000e+00 0.0000000000 CAG-269 0.000000e+00 0.0000000000 CAG-273 0.000000e+00 0.0000000000 CAG-302 0.000000e+00 0.0000000000 CAG-313 0.000000e+00 0.0000000000 CAJFPI01 0.000000e+00 0.0000000000 CAJFUH01 0.000000e+00 0.0000000000 Caccenecus 0.000000e+00 0.0000000000 Caccomorpha 0.000000e+00 0.0000000000 Caccousia 0.000000e+00 0.0000000000 Catenibacillus 0.000000e+00 0.0000000000 Coprocola 0.000000e+00 0.0000000000 Coproplasma 0.000000e+00 0.0000000000 Egerieicola 0.000000e+00 0.0000000000 Enterococcus 0.000000e+00 0.0000000000 Enterococcus_B 0.000000e+00 0.0000000000 Enterococcus_D 0.000000e+00 0.0000000000 Eubacterium_R 0.000000e+00 0.0000000000 Faecalibacterium 0.000000e+00 0.0000000000 Faeciplasma 0.000000e+00 0.0000000000 Fimicola 0.000000e+00 0.0000000000 Fimimorpha 0.000000e+00 0.0000000000 Fimivicinus 0.000000e+00 0.0000000000 Fournierella 0.000000e+00 0.0000000000 Gallispira 0.000000e+00 0.0000000000 Galloscillospira_A 0.000000e+00 0.0000000000 Gemmiger 0.000000e+00 0.0000000000 Heritagella 0.000000e+00 0.0000000000 Heteroclostridium 0.000000e+00 0.0000000000 Holdemania 0.000000e+00 0.0000000000 Hungatella_B 0.000000e+00 0.0000000000 JAETTH01 0.000000e+00 0.0000000000 Ligilactobacillus 0.000000e+00 0.0000000000 Limosilactobacillus 0.000000e+00 0.0000000000 Merdibacter 0.000000e+00 0.0000000000 Metalachnospira 0.000000e+00 0.0000000000 Neoanaerotignum_A 0.000000e+00 0.0000000000 Onthovicinus 0.000000e+00 0.0000000000 Ornithomonoglobus_A 0.000000e+00 0.0000000000 Paenibacillus_A 0.000000e+00 0.0000000000 Pararuminococcus 0.000000e+00 0.0000000000 Proteus 0.000000e+00 0.0000000000 Pseudobutyricicoccus 0.000000e+00 0.0000000000 Pullilachnospira 0.000000e+00 0.0000000000 RUG591 0.000000e+00 0.0000000000 RUG626 0.000000e+00 0.0000000000 Ruminococcus_G 0.000000e+00 0.0000000000 Salmonella 0.000000e+00 0.0000000000 Sarcina 0.000000e+00 0.0000000000 Scybalenecus 0.000000e+00 0.0000000000 Spyradocola 0.000000e+00 0.0000000000 Timburyella 0.000000e+00 0.0000000000 Tyzzerella 0.000000e+00 0.0000000000 UMGS775 0.000000e+00 0.0000000000 UMGS856 0.000000e+00 0.0000000000 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% mutate(genus=factor(genus,levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=colors_alphabetic) + geom_jitter(alpha=0.3) + facet_grid(.~cryosection)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 5 Alpha diversity 5.1 Filtered", " Chapter 5 Alpha diversity load(&quot;data/data.Rdata&quot;) quality &lt;- read_tsv(&quot;results/quality.tsv&quot;) Rows: 190 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): microsample dbl (1): quality ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. 5.1 Filtered #Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=0) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(richness=1) %&gt;% rownames_to_column(var=&quot;microsample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=1) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(neutral=1) %&gt;% rownames_to_column(var=&quot;microsample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=1,tree=genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(phylogenetic=1) %&gt;% rownames_to_column(var=&quot;microsample&quot;) # Merge alpha diversities alpha_diversity &lt;- richness %&gt;% full_join(neutral,by=join_by(microsample==microsample)) %&gt;% full_join(phylogenetic,by=join_by(microsample==microsample)) %&gt;% left_join(sample_metadata, by=join_by(microsample==microsample)) # Write alpha diversities alpha_diversity %&gt;% write_tsv(&quot;results/alpha_div_filtered.tsv&quot;) # Print alpha diversity alpha_diversity %&gt;% select(microsample,richness, neutral, phylogenetic, section, buffer, batch, Xcoord, Ycoord, size) %&gt;% tt() tinytable_z0zp45cm5l4fulrzotph .table td.tinytable_css_8p09eovnwzxfm46erelr, .table th.tinytable_css_8p09eovnwzxfm46erelr { border-bottom: solid 0.1em #d3d8dc; } microsample richness neutral phylogenetic section buffer batch Xcoord Ycoord size M300801 78 44.390390 3.749028 Caecum right B11 MSEB0011 11138.697 16511.96 4976 M300803 71 39.474118 3.786608 Caecum right B11 MSEB0011 11622.112 16524.68 4976 M300804 33 23.138363 3.233214 Caecum right B11 MSEB0011 12248.564 16527.94 4976 M300806 69 38.860540 3.950021 Caecum right B11 MSEB0011 12747.255 16541.31 4976 M300807 29 22.140226 3.287655 Caecum right B11 MSEB0011 13483.050 16527.29 4976 M300808 69 38.190092 3.774085 Caecum right B11 MSEB0011 12989.965 14210.77 5140 M300809 92 45.517070 3.878478 Caecum right B11 MSEB0011 12867.989 14539.38 5140 M300810 67 38.069888 3.747583 Caecum right B11 MSEB0011 12837.884 14848.53 5140 M300811 75 40.146393 3.913488 Caecum right B11 MSEB0011 12938.914 15317.88 5140 M300814 71 41.113223 3.729873 Caecum right B11 MSEB0011 12798.900 16162.58 5140 M300815 66 39.086465 3.613524 Caecum right B11 MSEB0011 12954.795 17561.44 5140 M300816 85 46.451754 3.743160 Caecum right B11 MSEB0011 12298.567 17532.22 4815 M300818 70 38.736589 3.841597 Caecum right B11 MSEB0011 12361.312 17184.34 4815 M300819 64 36.987861 3.746855 Caecum right B11 MSEB0011 12388.182 16727.71 4815 M300820 65 38.998311 3.565390 Caecum right B11 MSEB0011 12429.475 16253.90 4815 M300821 28 21.405009 3.215269 Caecum right B11 MSEB0011 12344.879 15766.97 4815 M300822 66 38.425872 3.761410 Caecum right B11 MSEB0011 12320.971 15543.70 4815 M300823 2 1.865292 1.025699 Caecum right B11 MSEB0011 8397.220 20245.35 4815 M300824 66 37.155094 3.621673 Caecum right B11 MSEB0011 11719.474 16323.69 5140 M300825 72 38.977169 3.778465 Caecum right B11 MSEB0011 11961.397 16158.99 5140 M300827 36 24.962372 3.552104 Caecum right B11 MSEB0011 13426.285 16219.43 5140 M300828 70 41.500829 3.710901 Caecum right B11 MSEB0011 13625.129 16318.35 5140 M300829 67 39.456486 3.685229 Caecum right B11 MSEB0011 13735.138 15891.15 5140 M300831 72 42.136663 3.749685 Caecum right B11 MSEB0011 13557.475 15842.13 5140 M300833 64 37.564201 3.742629 Caecum right B11 MSEB0011 12563.141 14328.70 4815 M300834 65 37.503166 3.662214 Caecum right B11 MSEB0011 12919.304 14314.45 4815 M300835 72 38.412732 3.796051 Caecum right B11 MSEB0011 11266.934 14345.81 4815 M300836 81 42.995510 3.823918 Caecum right B11 MSEB0011 11220.622 14576.61 4815 M300837 69 38.035625 3.693688 Caecum right B11 MSEB0011 11229.654 14972.21 4815 M300839 28 24.007909 3.071825 Caecum right B11 MSEB0011 11750.521 14739.78 4815 M300840 55 35.928449 3.466599 Caecum right B11 MSEB0011 8408.335 16985.06 4815 M300886 68 38.864891 3.734726 Caecum right B11 MSEB0011 12563.141 14328.70 4815 M301037 67 38.550173 3.700379 Caecum right B11 MSEB0011 12952.244 14374.79 4815 M301038 95 49.025592 3.801677 Caecum right B11 MSEB0011 11132.238 14468.77 4815 M301039 65 39.457873 3.634760 Caecum right B11 MSEB0011 11247.039 14610.85 4815 M301041 76 39.396970 3.721501 Caecum right B11 MSEB0011 11461.887 14723.80 4815 M301042 37 21.923568 2.419253 Caecum right B11 MSEB0011 NA NA NA M301044 39 21.624415 2.533782 Caecum right B11 MSEB0011 39826.465 16381.54 4976 M301045 47 24.763427 2.506886 Caecum right B11 MSEB0011 40015.933 16372.08 4976 M301046 43 24.571092 2.526482 Caecum right B11 MSEB0011 40430.650 16268.04 4976 M301048 36 22.515580 2.402202 Caecum right B11 MSEB0011 40926.241 16353.49 4976 M301049 51 25.566166 2.538082 Caecum right B11 MSEB0011 41736.017 16434.37 4976 M301050 51 27.013593 2.595462 Caecum right B11 MSEB0011 40192.569 16214.35 4815 M301051 48 25.513097 2.521687 Caecum right B11 MSEB0011 40154.836 16597.72 4815 M301052 47 25.054037 2.487207 Caecum right B11 MSEB0011 40195.378 17057.99 4815 M301054 51 27.497887 2.608193 Caecum right B11 MSEB0011 39791.598 18107.69 4815 M301055 3 2.958148 1.430632 Caecum right B11 MSEB0011 39770.599 18361.21 4815 M301057 41 24.548330 2.481412 Caecum right B11 MSEB0011 40071.187 18322.17 4815 M301058 51 24.685650 2.600090 Caecum right B11 MSEB0011 41182.306 16262.49 5306 M301059 41 22.838115 2.504465 Caecum right B11 MSEB0011 41148.061 16419.34 5306 M301060 41 22.085949 2.431606 Caecum right B11 MSEB0011 41113.291 16943.55 5306 M301063 55 26.058919 2.574183 Caecum right B11 MSEB0011 41110.029 17363.29 5306 M301064 36 21.211345 2.324170 Caecum right B11 MSEB0011 41081.029 18018.79 5306 M301065 48 22.809500 2.431098 Caecum right B11 MSEB0011 41233.762 19314.80 5306 M301066 44 22.627594 2.522630 Caecum right B11 MSEB0011 NA NA NA M301068 54 24.841196 2.561609 Caecum right B11 MSEB0011 40638.783 12056.80 4976 M301069 52 25.633368 2.595291 Caecum right B11 MSEB0011 41240.389 19087.94 4976 M301070 50 24.464418 2.578246 Caecum right B11 MSEB0011 39970.475 19209.60 4976 M301072 48 25.275776 2.509150 Caecum right B11 MSEB0011 40531.744 19206.54 4976 M301073 42 22.152355 2.373398 Caecum right B11 MSEB0011 39891.550 19315.27 4976 M301075 52 25.067277 2.489033 Caecum right B11 MSEB0011 41614.754 20130.11 5306 M301076 47 25.050461 2.605346 Caecum right B11 MSEB0011 41854.467 20045.31 5306 M301077 45 23.401572 2.490572 Caecum right B11 MSEB0011 41599.100 19885.17 5306 M301079 55 25.326204 2.583971 Caecum right B11 MSEB0011 41584.868 18556.12 5306 M301080 55 25.950604 2.652252 Caecum right B11 MSEB0011 41504.312 18869.21 5306 M301081 56 25.758838 2.539552 Caecum right B11 MSEB0011 41547.036 18764.20 5306 M301082 40 20.558064 2.438137 Caecum right B11 MSEB0011 41448.215 18598.52 4815 M301084 40 21.139646 2.384640 Caecum right B11 MSEB0011 35617.299 17656.65 4815 M301085 46 23.665128 2.547660 Caecum right B11 MSEB0011 35504.455 17663.82 4815 M301086 3 2.746776 1.379863 Caecum right B11 MSEB0011 39340.670 17466.54 4815 M301087 38 20.188957 2.411119 Caecum right B11 MSEB0011 39836.825 17317.49 4815 M301089 55 25.222899 2.622698 Caecum right B11 MSEB0011 39893.574 17603.84 4815 M301090 11 10.177835 2.850798 Caecum right B11 MSEB0011 11987.964 14611.57 5140 M301092 81 42.239350 3.881457 Caecum right B11 MSEB0011 11970.679 14805.97 5140 M301093 74 42.040751 3.798775 Caecum right B11 MSEB0011 11974.492 15028.19 5140 M301094 52 34.690589 3.552200 Caecum right B11 MSEB0011 11634.626 16069.06 5140 M301095 63 37.829057 3.794052 Caecum right B11 MSEB0011 11951.341 17101.42 5140 M301097 63 38.799672 3.591767 Caecum right B11 MSEB0011 11637.444 17718.28 5140 M301098 7 5.129603 2.206550 Caecum right B11 MSEB0011 11561.695 44185.51 5051 M301099 79 44.197664 3.690556 Caecum right B11 MSEB0011 NA NA NA M301101 29 21.233675 3.332363 Caecum right B11 MSEB0011 12734.197 44293.01 5051 M301102 91 45.048788 3.841336 Caecum right B11 MSEB0011 12969.565 44158.96 5051 M301103 87 47.074308 3.768424 Caecum right B11 MSEB0011 13185.650 44208.11 5051 M301104 86 42.070620 3.855769 Caecum right B11 MSEB0011 9358.026 29840.38 5051 M301107 85 44.085959 3.726884 Caecum right B11 MSEB0011 11910.144 44681.87 4976 M301109 89 44.499581 3.883056 Caecum right B11 MSEB0011 12319.179 44720.65 4976 M301110 71 40.399443 3.806195 Caecum right B11 MSEB0011 12501.844 44533.56 4976 M301111 85 46.384982 3.709288 Caecum right B11 MSEB0011 13023.057 44482.35 4976 M301112 81 43.016751 3.884220 Caecum right B11 MSEB0011 13710.841 44392.89 4976 M301113 66 41.188518 3.661747 Caecum right B11 MSEB0011 16993.588 34877.51 4976 M301114 2 1.949780 1.026458 Caecum right B11 MSEB0011 11597.647 36587.31 5140 M301115 94 46.380745 3.890159 Caecum right B11 MSEB0011 13633.292 44858.87 5140 M301116 91 41.565547 3.965827 Caecum right B11 MSEB0011 NA NA NA M301117 1 1.000000 1.000000 Caecum right B11 MSEB0011 13541.196 44647.52 5140 M301118 88 44.557488 3.863257 Caecum right B11 MSEB0011 13281.636 44666.11 5140 M301119 88 42.721424 3.944795 Caecum right B11 MSEB0011 13040.330 43338.48 5140 M301121 80 45.015148 3.850552 Caecum right B11 MSEB0011 12510.869 42698.96 5140 M301122 92 46.685374 3.969138 Caecum right B11 MSEB0011 13631.570 42206.49 4815 M301123 5 4.727141 1.814214 Caecum right B11 MSEB0011 13080.976 42296.18 4815 M301124 89 44.675912 3.790194 Caecum right B11 MSEB0011 12969.702 35753.33 4815 M301125 93 46.378970 3.310740 Caecum right B11 MSEB0011 NA NA NA M301126 87 48.162586 3.583629 Caecum right B11 MSEB0011 12457.571 41700.47 4815 M301128 92 46.876969 3.919816 Caecum right B11 MSEB0011 13048.627 35856.71 4815 M301129 39 27.263608 3.754449 Caecum right B11 MSEB0011 12499.870 41448.07 4815 M301130 95 46.800752 3.965545 Caecum right B11 MSEB0011 12782.075 41518.96 5306 M301133 89 45.346988 3.963153 Caecum right B11 MSEB0011 13567.046 41349.85 5306 M301134 12 10.914994 2.864771 Caecum right B11 MSEB0011 13467.410 41132.67 5306 M301136 85 47.890575 3.713511 Caecum right B11 MSEB0011 12803.275 41439.38 5306 M301137 82 46.037569 3.776627 Caecum right B11 MSEB0011 12718.026 41844.13 5306 M301138 5 4.373264 1.346928 Caecum right B11 MSEB0011 NA NA NA M301139 53 26.880769 2.541003 Caecum right B11 MSEB0011 NA NA NA M301140 11 9.156003 1.607278 Caecum right B11 MSEB0011 41387.295 35170.77 5140 M301141 55 28.123991 2.584447 Caecum right B11 MSEB0011 44348.559 44543.94 5140 M301142 14 12.138944 1.830887 Caecum right B11 MSEB0011 44260.827 44473.82 5140 M301143 55 26.883375 2.552598 Caecum right B11 MSEB0011 44313.136 45603.67 5140 M301144 55 26.257440 2.595144 Caecum right B11 MSEB0011 NA NA NA M301146 25 18.312516 2.165688 Caecum right B11 MSEB0011 42483.725 45618.07 5306 M301148 15 11.692717 1.706812 Caecum right B11 MSEB0011 44087.135 45539.00 5306 M301149 9 7.472477 1.535078 Caecum right B11 MSEB0011 42492.530 45596.87 5306 M301151 15 11.478183 1.648325 Caecum right B11 MSEB0011 42745.320 45490.41 5306 M301152 51 26.291533 2.584728 Caecum right B11 MSEB0011 43798.070 45509.65 5306 M301153 53 25.807122 2.549595 Caecum right B11 MSEB0011 42406.103 45397.93 5306 M301154 56 25.891069 2.610381 Caecum right B11 MSEB0011 45753.964 33192.72 5475 M301155 3 2.604455 1.342106 Caecum right B11 MSEB0011 42830.305 42823.83 5475 M301157 55 26.293786 2.613580 Caecum right B11 MSEB0011 42576.242 43022.45 5475 M301158 39 21.938995 2.444767 Caecum right B11 MSEB0011 42728.775 43333.67 5475 M301159 49 23.806395 2.516900 Caecum right B11 MSEB0011 42760.637 43797.16 5475 M301161 50 22.511703 2.468654 Caecum right B11 MSEB0011 42868.589 44491.68 5475 M301162 56 25.946768 2.560027 Caecum right B11 MSEB0011 43629.099 43115.75 4976 M301163 56 25.722170 2.528544 Caecum right B11 MSEB0011 43688.030 47714.25 4976 M301164 56 26.347068 2.610130 Caecum right B11 MSEB0011 45710.061 34152.47 4976 M301165 1 1.000000 1.000000 Caecum right B11 MSEB0011 43688.683 47559.99 4976 M301166 54 24.936370 2.530082 Caecum right B11 MSEB0011 43709.182 46658.54 4976 M301168 41 21.479954 2.538724 Caecum right B11 MSEB0011 43646.889 45916.86 4976 M301169 41 21.286255 2.368856 Caecum right B11 MSEB0011 43448.418 43290.23 4976 M301171 19 15.310579 1.918882 Caecum right B11 MSEB0011 37936.886 49454.08 5140 M301172 44 22.337885 2.591411 Caecum right B11 MSEB0011 42922.194 46597.81 5140 M301173 40 20.729912 2.342981 Caecum right B11 MSEB0011 42621.919 47576.53 5140 M301175 2 1.903598 1.017621 Caecum right B11 MSEB0011 42476.034 46748.81 5140 M301177 53 25.502922 2.633384 Caecum right B11 MSEB0011 42875.330 47973.74 5140 M301178 39 21.658421 2.478126 Caecum right B11 MSEB0011 41734.488 42635.43 4815 M301179 56 24.778960 2.609215 Caecum right B11 MSEB0011 41952.676 42594.99 4815 M301181 56 24.618855 2.543034 Caecum right B11 MSEB0011 42024.979 42894.11 4815 M301182 53 24.309103 2.616778 Caecum right B11 MSEB0011 41991.261 43284.39 4815 M301184 56 24.580278 2.589304 Caecum right B11 MSEB0011 42572.367 43097.89 4815 M301185 39 21.312516 2.482149 Caecum right B11 MSEB0011 42079.857 43292.01 4815 # Print alpha diversity summary alpha_diversity %&gt;% select(richness, neutral, phylogenetic, cryosection, batch) %&gt;% group_by(cryosection) %&gt;% summarise(richness=mean(richness), neutral=mean(neutral), phylogenetic=mean(phylogenetic)) %&gt;% tt() tinytable_gxmo7x204cxmjbnzjvbf .table td.tinytable_css_xq7dw8xvxtgnhv8xts0b, .table th.tinytable_css_xq7dw8xvxtgnhv8xts0b { border-bottom: solid 0.1em #d3d8dc; } cryosection richness neutral phylogenetic G103bI301A 44.11111 22.841943 2.450057 G103bI301B 40.68571 20.751517 2.310206 G103bI301M 3.00000 2.686632 1.173464 G121eI103A 65.31429 37.573253 3.671008 G121eI103B 71.37143 38.552331 3.599659 G121eI103M 2.00000 1.865292 1.025699 G121eI103Z 3.00000 2.863570 1.407107 alpha_diversity &lt;- read_tsv(&quot;results/alpha_div_filtered.tsv&quot;) alpha_diversity %&gt;% pivot_longer(!c(microsample,cryosection,section,batch,collection,type,buffer,Xcoord,Ycoord,size), names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(quality,by=join_by(microsample==microsample)) %&gt;% mutate(metric=factor(metric,levels=c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylogenetic&quot;))) %&gt;% ggplot(aes(x=cryosection, y=value, color=quality, group=cryosection))+ scale_color_gradient(low = &quot;red&quot;, high = &quot;green&quot;, name = &quot;Quality&quot;) + geom_boxplot(outlier.shape = NA) + geom_jitter(width=0.2) + facet_grid(metric ~ cryosection, scales = &quot;free&quot;) "],["beta-diversity.html", "Chapter 6 Beta diversity", " Chapter 6 Beta diversity load(&quot;data/data.Rdata&quot;) quality &lt;- read_tsv(&quot;results/quality.tsv&quot;) Rows: 190 Columns: 2 ── Column specification ────────────────────────────────────────────────────────────────────────────────────── Delimiter: &quot;\\t&quot; chr (1): microsample dbl (1): quality ℹ Use `spec()` to retrieve the full column specification for this data. ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. selected_samples &lt;- sample_metadata %&gt;% filter(section != &quot;Ileum&quot;) %&gt;% filter(type == &quot;Positive&quot;) %&gt;% filter(microsample %in% colnames(genome_counts_filt)) %&gt;% filter(!is.na(Xcoord)) %&gt;% select(microsample) %&gt;% pull() #Calculate Hill numbers richness_caecum &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(selected_samples)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=0, metric=&quot;C&quot;, out=&quot;pair&quot;) neutral_caecum &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(selected_samples)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=1, metric=&quot;C&quot;, out=&quot;pair&quot;) phylogenetic_caecum &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(selected_samples)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=1, tree=genome_tree, metric=&quot;C&quot;, out=&quot;pair&quot;) # Merge beta diversities beta_diversity &lt;- richness_caecum %&gt;% full_join(neutral_caecum,by=c(&quot;first&quot;, &quot;second&quot;)) %&gt;% full_join(phylogenetic_caecum,by=c(&quot;first&quot;, &quot;second&quot;)) %&gt;% rename(richness=C.x, neutral=C.y, phylogenetic=C) # Write alpha diversities beta_diversity %&gt;% write_tsv(&quot;results/beta_div.tsv&quot;) beta_diversity &lt;- read_tsv(&quot;results/beta_div.tsv&quot;) #Select high-quality samples caecum_samples_hq &lt;- sample_metadata %&gt;% left_join(quality,by=join_by(microsample==microsample)) %&gt;% filter(quality &gt;= 5) %&gt;% filter(!is.na(Xcoord)) %&gt;% select(microsample) %&gt;% pull() caecum_samples_nmds &lt;- genome_counts_filt %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(all_of(caecum_samples_hq)) %&gt;% select(where(~!all(. == 0))) %&gt;% hillpair(.,q=1, metric=&quot;C&quot;, out=&quot;dist&quot;) %&gt;% metaMDS(.,trymax = 999, k=2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;microsample&quot;) %&gt;% left_join(sample_metadata, by = join_by(microsample == microsample)) %&gt;% group_by(cryosection) %&gt;% mutate(microsample_x=mean(NMDS1), microsample_y=mean(NMDS2)) caecum_samples_nmds %&gt;% ggplot(aes(x=NMDS1,y=NMDS2, color=cryosection)) + geom_point(size=2) + geom_segment(aes(x=microsample_x, y=microsample_y, xend=NMDS1, yend=NMDS2), alpha=0.2) + scale_color_manual(values=c(&quot;#a3d1cf&quot;,&quot;#5bb5b1&quot;,&quot;#d1a3cf&quot;,&quot;#a364a0&quot;)) + theme_classic() + theme(legend.position=&quot;right&quot;, legend.box=&quot;vertical&quot;) + guides(color=guide_legend(title=&quot;Cryosection&quot;)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
